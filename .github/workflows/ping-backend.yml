name: Keep Render Server Alive

on:
  schedule:
    - cron: '*/5 * * * *' # co 5 minut
  workflow_dispatch:

jobs:
  ping:
    runs-on: ubuntu-latest
    steps:
      - name: Check backend health
        run: |
          echo "üîç Checking backend service health..."
          
          # Set timeout for curl requests
          TIMEOUT=30
          
          # Try the ping endpoint first (simplest)
          echo "Testing /api/ping endpoint..."
          ping_response=$(curl -s -w "%{http_code}" --max-time $TIMEOUT https://rentiva.onrender.com/api/ping)
          ping_code="${ping_response: -3}"
          ping_body="${ping_response%???}"
          
          if [ "$ping_code" -eq 200 ]; then
            echo "‚úÖ Ping endpoint is responding (HTTP $ping_code)"
          else
            echo "‚ö†Ô∏è  Ping endpoint responded with HTTP $ping_code"
            echo "Response: $ping_body"
          fi
          
          # Try the health endpoint
          echo "Testing /api/health endpoint..."
          health_response=$(curl -s -w "%{http_code}" --max-time $TIMEOUT https://rentiva.onrender.com/api/health)
          health_code="${health_response: -3}"
          health_body="${health_response%???}"
          
          if [ "$health_code" -eq 200 ]; then
            echo "‚úÖ Health endpoint is responding (HTTP $health_code)"
          else
            echo "‚ö†Ô∏è  Health endpoint responded with HTTP $health_code"
            echo "Response: $health_body"
          fi
          
          # Try the keep-alive endpoint
          echo "Testing /api/keep-alive endpoint..."
          keepalive_response=$(curl -s -w "%{http_code}" --max-time $TIMEOUT https://rentiva.onrender.com/api/keep-alive)
          keepalive_code="${keepalive_response: -3}"
          keepalive_body="${keepalive_response%???}"
          
          if [ "$keepalive_code" -eq 200 ]; then
            echo "‚úÖ Keep-alive endpoint is responding (HTTP $keepalive_code)"
          else
            echo "‚ö†Ô∏è  Keep-alive endpoint responded with HTTP $keepalive_code"
            echo "Response: $keepalive_body"
          fi
          
          # Try the cars endpoint
          echo "Testing /api/cars endpoint..."
          cars_response=$(curl -s -w "%{http_code}" --max-time $TIMEOUT https://rentiva.onrender.com/api/cars)
          cars_code="${cars_response: -3}"
          cars_body="${cars_response%???}"
          
          if [ "$cars_code" -eq 200 ]; then
            echo "‚úÖ Cars endpoint is responding (HTTP $cars_code)"
          else
            echo "‚ö†Ô∏è  Cars endpoint responded with HTTP $cars_code"
            echo "Response: $cars_body"
          fi
          
          # Try the root endpoint
          echo "Testing root endpoint..."
          root_response=$(curl -s -w "%{http_code}" --max-time $TIMEOUT https://rentiva.onrender.com/)
          root_code="${root_response: -3}"
          root_body="${root_response%???}"
          
          if [ "$root_code" -eq 200 ] || [ "$root_code" -eq 404 ]; then
            echo "‚úÖ Root endpoint is responding (HTTP $root_code)"
          else
            echo "‚ö†Ô∏è  Root endpoint responded with HTTP $root_code"
            echo "Response: $root_body"
          fi
          
          echo "üéØ Backend service monitoring completed!"
          
          # Always exit with success (0) to prevent workflow failures
          # The purpose is to ping the service, not to fail if it's down
          if [ "$ping_code" -eq 200 ] || [ "$health_code" -eq 200 ] || [ "$keepalive_code" -eq 200 ] || [ "$cars_code" -eq 200 ] || [ "$root_code" -eq 200 ] || [ "$root_code" -eq 404 ]; then
            echo "‚úÖ Backend service is alive and responding"
          else
            echo "‚ö†Ô∏è  Backend service appears to be down, but this is normal behavior"
            echo "The ping was sent successfully, which helps wake up the service"
          fi
          
          echo "‚úÖ Ping workflow completed successfully"
          exit 0