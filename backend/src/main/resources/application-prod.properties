# Production Configuration for Render.com
spring.application.name=rentiva-backend

# Server Configuration
server.port=${PORT:8080}

# Database Configuration for Render.com PostgreSQL
# Primary configuration using DATABASE_URL
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://dpg-d260hbbe5dus73cu2g90-a.oregon-postgres.render.com:5432/rentiva_database}
spring.datasource.username=${RENDER_DATABASE_USER:rentiva_database_user}
spring.datasource.password=${RENDER_DATABASE_PASSWORD:MOTsewR9SbhIDRJAsd4y9RZA4mqaac3N}
spring.datasource.driver-class-name=org.postgresql.Driver

# Fallback configuration for Render.com database variables
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://${RENDER_DATABASE_HOST:dpg-d260hbbe5dus73cu2g90-a.oregon-postgres.render.com}:${RENDER_DATABASE_PORT:5432}/${RENDER_DATABASE_NAME:rentiva_database}}

# JPA/Hibernate Properties for PostgreSQL
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.database=POSTGRESQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false

# CORS Configuration for production
spring.web.cors.allowed-origins=${CORS_ORIGINS:https://rentiva-frontend-k1ss.onrender.com,https://rentiva-admin-zmr9.onrender.com}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Actuator endpoints
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true

# Logging
logging.level.com.example.backend=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type=ERROR

# Connection pool configuration
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# Additional stability configurations
# Keep the application alive longer
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10
server.tomcat.connection-timeout=20000

# Disable graceful shutdown to prevent premature termination
server.shutdown=immediate

# Health check configurations
management.health.db.enabled=true
management.health.diskspace.enabled=true
management.health.defaults.enabled=true

# Add keep-alive headers
server.tomcat.keep-alive-timeout=60000
server.tomcat.max-keep-alive-requests=100

# Disable auto-configuration for datasource to use custom config
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
